# 1. На обработку поступает натуральное число.
# Нужно написать программу, которая выводит на экран сумму чётных цифр этого числа или 0, если чётных цифр в записи нет.
# Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# Примечание.
# Обратите внимание, что требуется найти ошибки в имеющейся программе, а не написать свою, возможно, использующую другой алгоритм решения.

# before
n = input()
s = 0
while n > 10:
    if n % 2 == 1:
        s = n % 10
    n //= 10
print(s)

# after
n = int(input())
s = 0
while n != 0:
    last_digit = n % 10
    if last_digit % 2 == 0:
        s = s + last_digit
    n = n // 10
print(s)


# 2. На обработку поступает последовательность из 8 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6.
# Нужно написать программу, которая выводит на экран количество делящихся нацело на 4 чисел в исходной последовательности и максимальное делящееся нацело на 4 число.
# Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO».
# Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# before
n = 7
count = 0
maximum = 1000
for i in range(1, n + 1):
    x = int(input())
    if x // 4 == 0:
        count += 1
        if x < maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# after. Эту не принимает
n = 8
count = 0
maximum = -10 ** 6
for _ in range(n):
    x = int(input())
    if -10 ** 6 <= x <= 10 ** 6:
        if x % 4 == 0:
            count = count + 1
            if x > maximum:
                maximum = x
    else:
        continue
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# or. А эту принял
n = 8
count = 0
maximum = -10 ** 6
for _ in range(n):
    x = int(input())
    if x % 4 == 0:
        count = count + 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')


# 3. На обработку поступает последовательность из 4 целых чисел.
# Известно, что вводимые числа по абсолютной величине не превышают 10^6.
# Нужно написать программу, которая выводит на экран количество нечётных чисел в исходной последовательности и максимальное нечётное число.
# Если нечётных чисел нет, требуется на экран вывести «NO».
# Программист торопился и написал программу неправильно.

# Найдите все ошибки в этой программе (их может быть одна или несколько).
# Известно, что каждая ошибка затрагивает только одну строку и может быть исправлена без изменения других строк.

# before
n = 4
count = 0
maximum = 999
for i in range(1, n + 1):
    x = int(input())
    if x % 2 != 0:
        count += 1
        if x > maximum:
            maximum = i
            break
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# after
n = 4
count = 0
maximum = -10 ** 6
for _ in range(n):
    x = int(input())
    if x % 2 != 0:
        count = count + 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')


# 4. На вход программе подается натуральное число n.
# Напишите программу, которая печатает звездную рамку размерами n×19.

# Формат входных данных
# На вход программе подаётся натуральное число n∈[3;19] — высота звездной рамки.

# Формат выходных данных
# Программа должна вывести звездную рамку размерами n×19.

n = int(input())
for i in range(1, n + 1):
    if i in (1, n):
        print("*" * 19)
    else:
        print("*", "*", sep=" " * 17)


# 5. Дано натуральное число n (n > 99).
# Напишите программу, которая определяет его третью (с начала) цифру.

# Формат входных данных
# На вход программе подается одно натуральное число, состоящее как минимум из трех цифр.

# Формат выходных данных
# Программа должна вывести его третью (с начала) цифру.

n = int(input())
while n > 99:
    last_digit = n % 10
    n = n // 10
    if n < 100:
        print(last_digit)

# or
n = int(input())
while n > 999:
    n //= 10
print(n % 10)


# 6. Дано натуральное число. Напишите программу, которая вычисляет:

# количество цифр 3 в нем;
# сколько раз в нем встречается последняя цифра;
# количество четных цифр;
# сумму его цифр, больших пяти;
# произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
# сколько раз в нем встречается цифры 0 и 5 (всего суммарно).

# Формат входных данных
# На вход программе подается одно натуральное число.

# Формат выходных данных
# Программа должна вывести значения указанных величин в указанном порядке.

num = int(input())

counter_for_three = 0
last_dig = num % 10
counter_for_last_digit = 0
counter_for_even = 0
sum_biggest_five = 0
composition_biggest_seven = 1
counter_for_five_and_zero = 0

while num != 0:
    last_digit = num % 10
    if last_digit == 3:
        counter_for_three = counter_for_three + 1
    if last_digit == last_dig:
        counter_for_last_digit = counter_for_last_digit + 1
    if last_digit % 2 == 0:
        counter_for_even = counter_for_even + 1
    if last_digit > 5:
        sum_biggest_five = sum_biggest_five + last_digit
    if last_digit > 7:
        composition_biggest_seven = composition_biggest_seven * last_digit
    if last_digit in (0, 5):
        counter_for_five_and_zero = counter_for_five_and_zero + 1
    num = num // 10

print(counter_for_three)
print(counter_for_last_digit)
print(counter_for_even)
print(sum_biggest_five)
print(composition_biggest_seven)
print(counter_for_five_and_zero)


# 7. Сриниваса Рамануджан – индийский математик, славившийся своей интуицией в области чисел.
# Когда английский математик Годфри Харди навестил его однажды в больнице, он обмолвился, что номером такси, на котором он приехал, было 1729, такое скучное и заурядное число.
# На что Рамануджан ответил: "Нет, нет! Это очень интересное число.
# Это наименьшее число, выражаемое как сумма двух кубов двумя разными способами". Другими словамм:
# 1729 = 1^3 + 12^3 = 9^3 + 10^3.

# Напишите программу, которая находит аналогичные интересные числа.
# В ответе запишите первые 5 чисел в порядке возрастания, включая число 1729.

for a in range(33):
    for b in range(33):
        for c in range(33):
            for d in range(33):
                if a != c and a != d and b != c and b != d:
                    if a ** 3 + b ** 3 == c ** 3 + d ** 3:
                        print(f"a = {a}, b = {b}, c = {c}, d = {d}, {a ** 3 + b ** 3}")
