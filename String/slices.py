# 1. Дополните приведенный код, используя срезы, так чтобы он вывел каждый 7 символ строки s начиная от начала строки.

s = "In 2010, someone paid 10k Bitcoin for two pizzas."
print(s[::7])


# 2. Дополните приведенный код, используя срезы, так чтобы он вывел строку s в обратном порядке.

# s = "In 2010, someone paid 10k Bitcoin for two pizzas."
# print(s[::-1])


# 3. На вход программе подается одно слово, записанное в нижнем регистре.
# Напишите программу, которая определяет является ли оно палиндромом.

# Формат входных данных
# На вход программе подается одно слово в нижнем регистре.

# Формат выходных данных
# Программа должна вывести «YES», если слово является палиндромом и «NO» в противном случае.

# Примечание. Палиндром читается одинаково в обоих направлениях, например слово «потоп».

string = input()
is_palindrome = False
if string == string[::-1]:
    is_palindrome = True
print("YES" if is_palindrome else "NO")

# or
string = input()
is_palindrome = False
if len(string) % 2 == 0:
    if string[:len(string) // 2] == string[:-len(string) // 2 - 1: -1]:
        is_palindrome = True
else:
    if string[:len(string) // 2] == string[-1:-len(string) // 2: -1]:
        is_palindrome = True
print("YES" if is_palindrome else "NO")

# or
string = input()
is_palindrome = True
first_letter, last_letter = 0, len(string) - 1
while first_letter < last_letter:
    if string[first_letter] != string[last_letter]:
        is_palindrome = False
        break
    else:
        first_letter = first_letter + 1
        last_letter = last_letter - 1
print('YES' if is_palindrome else "NO")


# 4. На вход программе подается одна строка. Напишите программу, которая выводит:

# общее количество символов в строке;
# исходную строку повторенную 3 раза;
# первый символ строки;
# первые три символа строки;
# последние три символа строки;
# строку в обратном порядке;
# строку с удаленным первым и последний символом.

# Формат входных данных
# На вход программе подается одна строка, длина которой больше 3 символов.

# Формат выходных данных
# Программа должна вывести данные в соответствии с условием. Каждое значение выводится на отдельной строке.

string = input()
print(len(string))
print(string * 3)
print(string[0])
print(string[:3])
print(string[-3::])
print(string[::-1])
print(string[1:len(string) - 1])  # or print(string[1:-1])


# 5. На вход программе подается одна строка. Напишите программу, которая выводит:

# третий символ этой строки;
# предпоследний символ этой строки;
# первые пять символов этой строки;
# всю строку, кроме последних двух символов;
# все символы с четными индексами;
# все символы с нечетными индексами;
# все символы в обратном порядке;
# все символы строки через один в обратном порядке, начиная с последнего.

# Формат входных данных
# На вход программе подается одна строка, длина которой больше 5 символов.

# Формат выходных данных
# Программа должна вывести данные в соответствии с условием. Каждое значение выводится на отдельной строке.

string = input()
print(string[2])
print(string[len(string) - 2])  # or print(string[-2:-1])
print(string[:5])
print(string[:len(string) - 2])  # or print(string[::-2])
print(string[::2])
print(string[1::2])
print(string[::-1])
print(string[-1:-len(string) - 1:-2])  # or print(string[-1::-2])


# 6. На вход программе подается строка текста.
# Напишите программу, которая разрежет ее на две равные части, переставит их местами и выведет на экран.

# Формат входных данных
# На вход программе подается строка текста.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Если длина строки нечетная, то длина первой части должна быть на один символ больше.

string = input()
if len(string) % 2 == 0:
    print(string[-len(string) // 2:] + string[:len(string) // 2])
else:
    first_half = string[:len(string) // 2 + 1]
    second_half = string[len(string) // 2 + 1:]
    print(second_half + first_half)
# да-да, можно вообще без доп. переменных
